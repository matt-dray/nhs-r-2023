---
title: "Base slaps!"
subtitle: "[matt-dray.github.io/nhs-r-2023](https://matt-dray.github.io/nhs-r-2023)"
author: "[Matt Dray](https://www.matt-dray.com), October 2023"
format:
  revealjs:
    theme: [default, nhs-r-2023.scss]
    # embed-resources: true
    center: true
    hash-type: number
    menu: false
    highlight-style: a11y
    code-line-numbers: false
title-slide-attributes:
  data-background-image: images/rgui.png
  data-background-position: top
  data-background-size: 100%
  data-notes: |
    * I'm Matt Dray, I help people in the public sector use R for reproducibility.
    * I work at the UK Health Security Agency, but this talk is pretty generic.
    * I'm here to cheerlead for the functionality built into good ol' vanilla base R.
    * The title of my talk is an off-the-mark pun on 'slap bass', the musical technique, but also an off-the-mark reference to how I'm told that 'young people these days' say 'it slaps' to mean it's 'cool'. The fact I felt I had to explain this to you shows how truly hard I slap.
    * Bonus points to folks who recgonise the reference to the R graphical user interface in the design of these slides.
include-in-header:
  - text: |
      <link rel="shortcut icon" href="images/quit.png" />
---

```{r}
#| label: setup
#| echo: false
knitr::opts_chunk$set(
  echo = TRUE,
  prompt = TRUE  # code-block lines begin with '>' and '+' prompt
)
```

## {center='true' background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
Polite notice: this is not a flamewar 🔥
</center>

::: {.notes}
* I have some polite notices and you have to respect them because they're polite.
* This is not about one tool being better than another; it's not {base} vs {tidyverse} vs {data.table} vs {collapse}, etc. All of us have a common enemy and that is Python.
* Oh wait, I said no flamewars. Actually, the enemy is anyone who doesn't open their heart to base R. And you're here listening to me, so you're a winner.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
What is 'base R'? 🤔
</center>

::: {.notes}
* It's entirely possible that you already have no idea what I'm talking about.
* Actually, what do we mean by 'base' R?
* Well, it's as it sounds: it's the functionality that R is equipped with in the 'base' installation, when we first install it.
* It's the functions that R has before we install and attach any packages.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

```{r}
#| label: installed
(attached <- sessionInfo()$base |> sort())
```

. . .

```{r}
#| label: extent
extent <- installed.packages(priority = "base") |> row.names()
setdiff(extent, attached)
```

::: {.notes}
* Buuuut it's marginally more complicated than that.
* Surprise, it's actually _several_ packages that are automatically installed with R, including one called 'base', confusingly.
* Some are automatically attached when you start R. You can see this if you look at `sessionInfo()`.
* You can also use the function `search()` to confirm that these packages are already attached when you start a new R session.
* Aside: note that you can assign and print all at once if you wrap the whole thing in brackets.
* Some other packages are considered base, but not attached. These have priority 'base' when you look at the output of `installed.packages()`.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

```{r}
#| label: example-1
x <- head(mtcars)
(y <- x[x$wt > 3, c("hp", "cyl")])
```

. . .

```{r}
#| label: example-2
(y$hp_per_cyl <- round(y$hp / y$cyl))
```

. . .

```{r}
#| label: example-3
(z <- y[order(-y$hp_per_cyl), ])
```

. . .

```{r}
#| label: example-4
sapply(z, mean)
```

::: {.notes}
* Here's a quick reminder of what some pure, unadulterated R looks like in a contrived example. This isn't a training session, so I'll keep this brief.
* Let's take the `head()`, the top six rows, of the built-in `mtcars` dataset as an example data.frame, and assign it to `x`.
* Then we can use square-bracket notation to ask for certain rows and columns to extract into a new object, called `y`.
* So, from `x`, we want wherever the `wt` (weight) column of the `x` object has a value greater than 3.
* After the comma, we're asking for the columns with the names `hp` (horsepower) and `cyl` (cylinder count), which we provide in the vector compsoed with the `c()` (combine/concatenate) function.
* For a new column, we can assign the `round()`ed value of horsepower over (`/`) cylinder count to a freshly `hp_per_cyl` column, declared on the left of the assignment arrow.
* We can `order()` the data.frame by values of `hp_per_cyl`, which will be descending due to the minus (`-`) symbol, and call this object `z`.
* Finally, some functional programming: to each column of the data.frame `z`, let's apply the  function `mean` with `sapply()`, which simplifies to a vector of results in this case.
* You'll likely have recognised certain functions in there at very least. Maybe you learnt something new just from this little bit of code.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

1. Stability
2. Dependency
3. Modernity

::: {.notes}
* Regardless of what you think of that style of coding, I want to make three points (and maybe a bonus one) to just remind you why base R is useful and how it may have changed since you last engaged with it.
* First, its incredible stability over time.
* Second, that it can help limit your time spent in 'dependnecy' hell.
* Third, that 'stability' does not mean 'unresponsive to the evolving needs of the R community'.
* My conceit here is that R is great, even when unadorned by packages. This is a message for new users, people who are more used to coding with interfaces afforded by packages, and even folks who aren't actually R users (yet).
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/nice-doggie.gif){fig-alt="A painting of two horseshoe crabs just kicking back underwater. The artist, Heinrich Harder, has signed the piece." fig-align="center" width=100%}

::: {.notes}
* So, first point: stability.
* I want to talk a little about how base R is a great choice for work that needs to be stable and reproducible over time. 
* The core language retains so much of what was in the original specifications in 1993 and in the version 1.0 release in 2000. 
* Boradly, base code created 10 years ago has a pretty good chance of running today and 10 years from now.
* There's no version-2-to-version-3 rift as in Python for example.
* If you want a trip down memory lane, I downloaded R version 1.0 and found in there a little file called 'Y2K' that explained that 'we expect R to be Y2K compliant', lol. There was a time where we couldn't be sure if code would survive into the 21st Century; yet here were are nearly a quarter of a century later.
* You might be wondering why I've chosen this image. Here's my terrible metaphor: base R is not a dinosaur. It's more like a horseshoe crab. It's not extinct. It's survived all this time. It's also pretty unassuming and kind of weird. You could introduce a horseshoe crab today to one from a million years ago and they'd be friends I reckon.
* Also, us R users are Milhouse, aren't we?
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/xkcd.png){fig-alt="Comic from xkcd. Lots of blocks are stacked on top of each other. One small block near the bottom is indicated. Th eimplicatinois that removing the one small block will bring the whole thing down. THe stack is labelled 'your dependencies', the small block is labelled 'some package' and the big stable blocks underneath it are labelled 'base'." fig-align="center"}

::: {.notes}
* Okay, next point: dependencies.
* One of R's greatest strengths is its extensibility. The CRAN repository has about 20,000 packages at the time of speaking. A lot of smart people have written a lot of excellent code so that you don't have to. 
* Whether or not you take on a dependency is up to you and the type of project you're working on and it.
* But, of course, you should always be aware that packages come and go, functions deprecate, thermodynamics laws apply.
* For some precious projects you may want to think about where you can minimise dependencies and include more base R code so that you can increase the likelihood of successfully re-executing it into the future and on other computers by other people.
* Base R can help you with this.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/logo.gif){fig-alt="The old R logo morphs into the new R logo. The old has bevels, highlights and shadows. The new one is simpler with peak 'flat' design." fig-align="center" width="60%"}

::: {.notes}
* Third point: modernity.
* I don't think that a lack of change is stubbornness or sticking one's head in the sand. I would call it measured and considerate. 
* I want to talk about how, despite the stability, the language continues to adapt sensibly, listen to its users and embrace modern ways of using R. 
* And actually base R has changed in a number of ways, including the use of a base pipe, simplified anonymous function structure and string literals. These are all things that the community of R users has asked for.
* And perhaps more famously, the conversion of the default `stringsAsFactors = TRUE` to `FALSE`, perhaps reflecting a change in R from a language of statistics (where character values as factors makes a lot of sense) to a more general-purpose language.
* Of course, there are still opportunities to improve base R. Lots of stuff can come out of the woodwork after 30 years, or as tastes change. Henrik Bengtsson has a GitHub repo to which people can add issues. Each one lists a specific gripe that someone has had with the functioning of the language. For example, out very own Tim Taylor at UKHSA posted about the behaviour of indexing a dataframe to return a single column. By default, a single column is returned as a vector; the user needs to add the argument `drop = FALSE` to retain the columnar structure. Perhaps that behaviour will updated in the future?
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
The _Modern Base Aesthetic_ 🧐

`|>`, `_`, `\()`, `r"{}"`
</center>

::: {.notes}
* I want to focus a little on the changes made to R from version 4. Maybe you haven't seen some of these.
* For dramatic effect, I'm using the phrase 'modern base aesthetic' to describe this 'new look' R.
* The 'pipe' (`%>%`)—developed in the {magrittr} package by Stefan Milton-Bache and popularised by the tidyverse—has an implementation now in base R (`|>`).
* It's been followed by a placeholder, the underscore (`_`), to pass an object from the left-hand side of the pipe to the non-first argument on the right-hand side.
* With functional programming you often write functions on the fly without formally declaring them. These are called 'anonymous' or 'lambda' functions. You used to have to write out the word `function`, but now you can use this little backslash. Tidyverse has the tilde, even they recommend the new lambda syntax now.
* String handling can generally be a bit tedious, so R can now recognise strings exactly as they're provided. This is provided through the use of the letter `r` ahead of the string, which you can translate to 'raw'.
* I'll show you a single example that incorporates all these things.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

String literals

```{r}
#| label: modern-strings-1
#| eval: false
paths <- c(
  r"{C:\nonsense\trash 2021v1.txt}",
  r"{C:\nonsense\bilge-2020-"new".txt}",
  r"{C:\nonsense\rubbish2023_final.txt}"
)
```

. . .

Pipes and lambdas

```{r}
#| label: modern-pipe-lambda-1
#| eval: false
#| code-line-numbers: "1|2|3"
r"(20\d{2})" |> 
  gregexpr(paths) |> 
  regmatches(paths, m = _) |> 
  sapply(\(yr) yr == "2023")
```

```{r}
#| label: cat-blank
#| echo: false
# Add blank 'placeholder' spot for output on next slide
cat(" ")
```

::: {.notes}
* Task: extract the year from each of these filepaths and return a logical if they match the current year. This is a contrived demo, yes, but I do stuff like this all the time.
* Windows uses a backslash in filepaths. This is bad. 
* R reads '\n' as new line and can't handle double-quotes in double-quotes, for example, so normally we'd have to escape them with another backslash. (You can see the syntax highlighting on this page is getting confused and is recolouring '\n', for example!)
* String literals read the literal string. You do it by putting an 'r' before the string and then wrap the string inside the quote marks in curly braces, or parentheses.
* Voila, no need to manually go through the whole string to add extra backslashes.
* Take the regular expression for two zero followed by two digits, i.e. a year, then...
* Pass it to the first argument of `gregexpr()`, the pattern matching function, then...
* Pass it to the not-first 'm' argument of `regmatches()` using the underscore placeholder, then....
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

String literals

```{r}
#| label: modern-strings-2
paths <- c(
  r"{C:\nonsense\trash 2021v1.txt}",
  r"{C:\nonsense\bilge-2020-"new".txt}",
  r"{C:\nonsense\rubbish2023_final.txt}"
)
```

Pipes and lambdas

```{r}
#| label: modern-pipe-lambda-2
#| code-line-numbers: "4"
#| eval: false
r"(20\d{2})" |> 
  gregexpr(paths) |> 
  regmatches(paths, m = _) |> 
  sapply(\(yr) yr == "2023")
```

```{r}
#| label: cat-blank-2
#| echo: false
# Add blank 'placeholder' spot for output on next slide
cat(" ")
```

::: {.notes}
* Pass it as the first argument to `sapply()`, where we'll apply a function over our list and simplify it to a vector...
* Where the function is declared on the fly using as an 'anonymous' or 'lambda' function, declared with this simplified backslash construction rather than having to type out the word `function`.
* You can see that the style of programming that tidyverse users are confident with has made its way into base R. No more endless nesting of functions or hundreds of intermediate objects cluttering the environment.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

String literals

```{r}
#| label: modern-strings-3
paths <- c(
  r"{C:\nonsense\trash 2021v1.txt}",
  r"{C:\nonsense\bilge-2020-"new".txt}",
  r"{C:\nonsense\rubbish2023_final.txt}"
)
```

Pipes and lambdas

```{r}
#| label: modern-pipe-lambda-3
#| code-line-numbers: true
r"(20\d{2})" |> 
  gregexpr(paths) |> 
  regmatches(paths, m = _) |> 
  sapply(\(yr) yr == "2023")
```

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
Bonus: base did what? 🙃
</center>

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/pixeltrix.png){fig-alt="Demo of the 'pixeltrix' package in RStudio. A function has been run and the plot window displays a grid of squares. They're coloured to look like Mario from Super Mario. The user hits the escape key and is returned a matrix representation of the character they made, including colour values as an attribute." width="100%" fig-align="center"}

<center>
pixeltrix [`r fontawesome::fa("github")`](https://github.com/matt-dray/pixeltrix) [`r fontawesome::fa("readme")`](https://www.rostrum.blog/index.html#category=pixeltrix)
</center>

::: {.notes}
* I want to show you three packages I've written for fun that include interesting base R functions.
* The first is the {pixeltrix}, a package for creating blocky pixel art, like you might see on retro videogames.
* It works thanks to `locator()`, a curious base function that lets you click a point on a plot and have its coordinates returned.
* {pixeltrix} contains a `repeat` loop, that asks the user to click on a plot with `locator()`; updates the plot given the click; and then re-asks the user to click until they break the `repeat` loop.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/r.oguelike.gif){fig-alt="Gif demonstration of the 'r.oguelike' package in the RStudio console. The 'start_game' function is run. The console clears and a text-based tile-based dungeon map appeears. Below is an inventory that includes health, money and food counters. Below is a prompt asking the user to type the W, A, S or D key and hit enter to move. The user does this and their player character moves around the dungeon space, collects an apple, battles an enemy and then eats the apple to restore health." width="100%" fig-align="center"}

<center>
r.oguelike [`r fontawesome::fa("github")`](https://github.com/matt-dray/r.oguelike) [`r fontawesome::fa("readme")`](https://www.rostrum.blog/index.html#category=r.oguelike)
</center>

::: {.notes}
* {r.oguelike} mimics an early text-based videogame. 
* It uses base R functions to procedurally build a tile-based dungeon, which is stored in a `matrix()` and queried with `which()` to identify the locations of characters. The player is `@` and the enemy is `E`. There's an inventory where gold can be stored, along with apples, `a`, that restore a health gauge.
* The user can move their character (represented by the `@` symbol) by typing into the interactive prompt, which is provided by the base function `readline()`. The enemy tracks the player.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/tamRgo.png){fig-alt="Demo of the 'tamRgo' package in the RStudio console. On the left, the 'tamRgo' package is loaded, which tells the user that their pet, 'Kevin', is pleased to see them and also provides some prompts for interacting with the pet. The user uses the 'get_stats' function for a printout showing the pet's status, like its age and how hungry it is. On the right, the user uses the 'see_pet' function' and a blocky character is printed to the console, along with a blocky poop. The user runs the 'clean' function and reinspects the pet and a message says that 'dirty' status value is now set to zero." width="100%" fig-align="center"}

<center>
tamRgo [`r fontawesome::fa("github")`](https://github.com/matt-dray/tamRgo) [`r fontawesome::fa("readme")`](https://www.rostrum.blog/posts/2022-11-13-tamrgo/)
</center>

::: {.notes}
* {tamRgo} simulates a cyber pet that lives on your computer and 'exists' between R sessions.
* Like a Tamagotchi in R, if you're the right age to know what a Tamagotchi is.
* How can data about your pet exist between sessions? The package makes use of the base R function `R_user_dir()`, which builds a path to a standardised location on the user's computer where data or cached items can be stored. In {tamRgo}, a 'blueprint' text file stores the pet's status. The blueprint is read at the start of the next R session and values related to time, such as the pet's age and hunger level, are updated given the difference between the current date and date of last interaction.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
<h2>Base slaps!</h2>

Stability, Dependency, Modernity, Oddity!
</center>

![](images/qr.png){fig-alt="A QR code that links to where these slides exist on the web." width=50% fig-align="center"}

<center>
[matt-dray.github.io/nhs-r-2023](https://matt-dray.github.io/nhs-r-2023)

Matt Dray [`r fontawesome::fa("globe")`](https://www.matt-dray.com) [`r fontawesome::fa("pencil")`](https://www.rostrum-blog.com) [`r fontawesome::fa("github")`](https://github.com/matt-dray) [`r fontawesome::fa("mastodon")`](https://fosstodon.org/@mattdray)
</center>

::: {.notes}
* So, at best: maybe you'll go back to your computer and consider whether base R might be useful for you in terms of its stability over time, or how in-built functionality might simplify your dependencies. Maybe you'll give the more modern functionality a go. Or maybe you were just unaware (confused?) that the base installation of R has the flexibility to do some unexpected, creative things.
* You can find these slides at that address, embedded in that QR code, and then you can also see what I've been up to by clicking the links there.
* At worst: I hope you learnt at least one new thing, however small.
* At very, very best: I hope you agree with me that _base slaps_!
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

Links 🔗

* [Slides](https://matt-dray.github.io/nhs-r-2023) on the web
* [Source code](https://github.com/matt-dray/nhs-r-2023) for this talk
* [Blogpost](https://www.rostrum.blog/posts/2023-10-17-nhs-r-2023/) about this talk

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

Credits 👏

* 'Summer of 4 Ft. 2', _The Simpsons_, created by Matt Groening (via [Frinkiac](https://frinkiac.com/))
* ['Dependency'](https://xkcd.com/2347/), _xkcd_, created by Randall Munroe ([CC BY-NC 2.5](https://creativecommons.org/licenses/by-nc/2.5/), altered)
* [R logos](https://www.r-project.org/logo/), R Foundation ([CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/), altered)
