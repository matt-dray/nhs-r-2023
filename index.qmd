---
title: "Base slaps!"
subtitle: "[matt-dray.github.io/nhs-r-2023](https://matt-dray.github.io/nhs-r-2023)"
author: "[Matt Dray](https://www.matt-dray.com), October 2023"
format:
  revealjs:
    theme: [default, nhs-r-2023.scss]
    center: true
    hash-type: number
    menu: false
    highlight-style: a11y
    code-line-numbers: false
title-slide-attributes:
  data-background-image: images/rgui.png
  data-background-position: top
  data-background-size: 100%
  data-notes: |
    * I'm Matt Dray, I help people in the public sector use R for reproducibility.
    * I work at the UK Health Security Agency, but this talk is pretty generic.
    * I'm here to cheerlead for functionlity built into good ol' vanilla base R.
    * The title of my talk is an off-the-mark pun on 'slap bass', the musical technique, but also an off-the-mark reference to how I'm told that 'young people these days' say 'it slaps' to mean it's 'cool'. The fact I felt I had to explain this to you shows how truly hard I slap.
    * Bonus points to folks who get the R reference in my slide theme.
include-in-header:
  - text: |
      <link rel="shortcut icon" href="images/quit.png" />
---

```{r}
#| label: setup
#| echo: false
knitr::opts_chunk$set(
  echo = TRUE,
  prompt = TRUE  # code-block lines begin with '>' and '+' prompt
)
```

## {center='true' background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
Polite notice: this is not a flamewar üî•
</center>

:::{.notes}
* I have some polite notices and you have to respect them because they're polite.
* First: the 'too long didn't read' here is a plea not to forget about humble ol' base R when you're programming, for several good reasons we'll get into.
* Also, this is not about {base} vs {tidyverse} vs {data.table} vs {collapse}, etc. All of us have a common enemy and that is Python.
* Oh wait, I said no flamewars. Actually, the enemy is anyone who doesn't open their heart to base R. And you're here listening to me, so you're a winner.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
What is 'base R'? ü§î
</center>

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

```{r}
#| label: installed
(attached <- sessionInfo()$base |> sort())
```

. . .

```{r}
#| label: extent
extent <- installed.packages(priority = "base") |> row.names()
extent[extent != attached]
```

::: {.notes}
* What do we mean by 'base' R?
* Surprise, it's actually _several_ packages that are automatically installed with R , including one called 'base', confusingly.
* Some are automatically attached when you start R. You can see this if you look at `sessionInfo()`.
* Aside: note that you can assign and print all at once if you wrap the whole thing in brackets.
* Some other packages are considered base, but not attached. These have priority 'base' when you look at the output of `installed.packages()`.
* There are also some non-base packages that have a special status: 'recommended'.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

```{r}
#| label: example-1
x <- head(mtcars)
(y <- x[x$wt > 3, c("hp", "cyl")])
```

. . .

```{r}
#| label: example-2
(y$hp_per_cyl <- round(y$hp / y$cyl))
```

. . .

```{r}
#| label: example-3
(z <- y[order(-y$hp_per_cyl), ])
```

. . .

```{r}
#| label: example-4
sapply(z, mean)
```


## {background-image="images/rgui.png" background-position="top" background-size="100%"}

1. Stability
2. Dependency
3. Modernity

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/horseshoe-crab.jpg){fig-alt="A painting of two horseshoe crabs just kicking back underwater. The artist, Heinrich Harder, has signed the piece." fig-align="center" width=100%}

::: {.notes}
* R originally appeared in 1993 and hit version 1.0 in 2000.
* Base packages have changed very little over time.
* Base code created 10 years ago has a pretty good chance of running today.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/xkcd.png){fig-alt="Comic from xkcd. Lots of blocks are stacked on top of each other. One small block near the bottom is indicated. Th eimplicatinois that removing the one small block will bring the whole thing down. THe stack is labelled 'your dependencies', the small block is labelled 'some package' and the big stable blocks underneath it are labelled 'base'." fig-align="center"}

::: {.notes}
* Using packages in your work can help make your life a lot easier.
* But you have to consider that dependencies can cause problems; packages and functions come and go.
* An understanding of base can get around some of this.
* Your work can be more reliably reproducible in future.
* There's less work for you to update your code or wrestle with additional tools.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/logo.gif){fig-alt="The old R logo morphs into the new R logo. The old has bevels, highlights and shadows. The new one is simpler with peak 'flat' design." fig-align="center" width="60%"}

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
The _Modern Base Aesthetic_ üßê
</center>

::: {.notes}
* Stable and dependable, yes, but that doesn't mean it never advances.
* The pipe, developed in the {magrittr} package by Stefan Milton-Bache and popularised by the tidyverse, has come to base R.
* It's been followed by a placeholder to pass an object from the LHS to the non-first argument on the RHS.
* With functional programming you often write functions on the fly without formally declaring them. These are called 'anonymous' or 'lambda' functions. You used to have to write out the word `function`, but now you can use this little backslash. Tidyverse has the tilde, even they recommend the new lambda syntax now.
* String handling can generally be a bit tedious, so R can now recognise strings exactly as they're provided. You can see this sort of thing in Python.
* I'll show you a single example that incorporates all these things.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

String literals

```{r}
#| label: modern-strings-1
#| eval: false
paths <- c(
  r"{C:\nonsense\trash 2021v1.txt}",
  r"{C:\nonsense\bilge-2020-"new".txt}",
  r"{C:\nonsense\rubbish2023_final.txt}"
)
```

. . .

Pipes and lambdas

```{r}
#| label: modern-pipe-lambda-1
#| eval: false
#| code-line-numbers: "1|2|3"
r"(20\d{2})" |> 
  gregexpr(paths) |> 
  regmatches(paths, m = _) |> 
  sapply(\(yr) yr == "2023")
```

```{r}
#| label: cat-blank
#| echo: false
# Add blank 'placeholder' spot for output on next slide
cat("¬†")
```

::: {.notes}
* For dramatic effect, I'm using the phrase 'modern base aesthetic' to describe this 'new look' R.
* Task: extract the year from each of these filepaths and return a logical if they match the current year. This is a contrived demo, yes, but I do stuff like this all the time.
* Windows uses a backslash in filepaths. This is bad. 
* R reads '\n' as new line and can't handle double-quotes in double-quotes, for example, so normally we'd have to escape them with another backslash.
* String literals read the literal string. You do it by putting an 'r' before the string and then wrap the string inside the quote marks in curly braces, or parentheses.
* Voila, no need to manually go through the whole string to add extra backslashes.
* Take the regular expression for two zero followed by two digits, i.e. a year, then...
* Pass it to the first argument of `gregexpr()`, the pattern matching function, then...
* Pass it to the not-first 'm' argument of `regmatches()` using the underscore placeholder, then....
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

String literals

```{r}
#| label: modern-strings-2
paths <- c(
  r"{C:\nonsense\trash 2021v1.txt}",
  r"{C:\nonsense\bilge-2020-"new".txt}",
  r"{C:\nonsense\rubbish2023_final.txt}"
)
```

Pipes and lambdas

```{r}
#| label: modern-pipe-lambda-2
#| code-line-numbers: "4"
r"(20\d{2})" |> 
  gregexpr(paths) |> 
  regmatches(paths, m = _) |> 
  sapply(\(yr) yr == "2023")
```

::: {.notes}
* Pass it as the first argument to `sapply()`, where we'll apply a function over our list and simplify it to a vector...
* Where the function is declared on the fly using as an 'anonymous' or 'lambda' function, declared with this simplified backslash construction rather than having to type out the word `function`.
* You can see that the style of programming that tidyverse users are confident with has made its way into base R. No more endless nesting of functions or hundreds of intermediate objects cluttering the environment.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
Bonus: base did what? üôÉ
</center>

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/pixeltrix.png){fig-alt="Demo of the 'pixeltrix' package in RStudio. A function has been run and the plot window displays a grid of squares. They're coloured to look like Mario from Super Mario. The user hits the escape key and is returned a matrix representation of the character they made, including colour values as an attribute." width="100%" fig-align="center"}

<center>
pixeltrix [`r fontawesome::fa("github")`](https://github.com/matt-dray/pixeltrix) [`r fontawesome::fa("readme")`](https://www.rostrum.blog/index.html#category=pixeltrix)
</center>

::: {.notes}
* I want to show you three packages I've written for fun that include interesting base R functions.
* The first is the {pixeltrix}, a package for creating blocky pixel art, like you might see on retro videogames.
* It works thanks to `locator()`, a curious base function that lets you click a point on a plot and have its coordinates returned.
* {pixeltrix} contains a `repeat` loop, that asks the user to click on a plot with `locator()`; updates the plot given the click; and then re-asks the user to click until they break the `repeat` loop.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/r.oguelike.gif){fig-alt="Gif demonstration of the 'r.oguelike' package in the RStudio console. The 'start_game' function is run. The console clears and a text-based tile-based dungeon map appeears. Below is an inventory that includes health, money and food counters. Below is a prompt asking the user to type the W, A, S or D key and hit enter to move. The user does this and their player character moves around the dungeon space, collects an apple, battles an enemy and then eats the apple to restore health." width="100%" fig-align="center"}

<center>
r.oguelike [`r fontawesome::fa("github")`](https://github.com/matt-dray/r.oguelike) [`r fontawesome::fa("readme")`](https://www.rostrum.blog/index.html#category=r.oguelike)
</center>

::: {.notes}
* {r.oguelike} mimics an early text-based videogame. 
* It uses base R functions to procedurally build a tile-based dungeon, which is stored in a `matrix()` and queried with `which()` to identify the locations of characters. The player is `@` and the enemy is `E`. There's an inventory where gold can be stored, along with apples, `a`, that restore a health gauge.
* The user can move their character (represented by the `@` symbol) by typing into the interactive prompt, which is provided by the base function `readline()`. The enemy tracks the player.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

![](images/tamRgo.png){fig-alt="Demo of the 'tamRgo' package in the RStudio console. On the left, the 'tamRgo' package is loaded, which tells the user that their pet, 'Kevin', is pleased to see them and also provides some prompts for interacting with the pet. The user uses the 'get_stats' function for a printout showing the pet's status, like its age and how hungry it is. On the right, the user uses the 'see_pet' function' and a blocky character is printed to the console, along with a blocky poop. The user runs the 'clean' function and reinspects the pet and a message says that 'dirty' status value is now set to zero." width="100%" fig-align="center"}

<center>
tamRgo [`r fontawesome::fa("github")`](https://github.com/matt-dray/tamRgo) [`r fontawesome::fa("readme")`](https://www.rostrum.blog/posts/2022-11-13-tamrgo/)
</center>

::: {.notes}
* {tamRgo} simulates a cyber pet that lives on your computer and 'exists' between R sessions.
* Like a Tamagotchi in R, if you're the right age to know what a Tamagotchi is.
* How can data about your pet exist between sessions? The package makes use of the base R function `R_user_dir()`, which builds a path to a standardised location on the user's computer where data or cached items can be stored. In {tamRgo}, a 'blueprint' text file stores the pet's status. The blueprint is read at the start of the next R session and values related to time, such as the pet's age and hunger level, are updated given the difference between the current date and date of last interaction.
:::

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

<center>
<h1>Base slaps!</h1>

Stability, Dependency, Modernity, Oddity!
</center>

![](images/qr.png){fig-alt="A QR code that links to where these slides exist on the web." width=50% fig-align="center"}

<center>
[matt-dray.github.io/nhs-r-2023](https://matt-dray.github.io/nhs-r-2023)

Matt Dray [`r fontawesome::fa("globe")`](https://www.matt-dray.com) [`r fontawesome::fa("pencil")`](https://www.rostrum-blog.com) [`r fontawesome::fa("github")`](https://github.com/matt-dray) [`r fontawesome::fa("mastodon")`](https://fosstodon.org/@mattdray)
</center>

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

## {background-image="images/rgui.png" background-position="top" background-size="100%"}

Credits

* [Horseshoe crabs](https://commons.wikimedia.org/wiki/File:Limulus.jpg), Heinrich Harder (Public domain)
* [Dependency](https://xkcd.com/2347/), xkcd ([CC BY-NC 2.5](https://creativecommons.org/licenses/by-nc/2.5/), altered)
* [R logos](https://www.r-project.org/logo/), R Foundation ([CC-BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/), altered)
